sudo: required
language: rust
rust:
  - nightly

os:
  - linux
  - osx
  - windows

env: RELEASE=false

matrix:
  include:
  - os: linux
    env: BUILD_ANDROID=true RELEASE=false
# allow_failures:
# - env: BUILD_ANDROID=true RELEASE=false


before_install:
  - cargo install cargo-prune --force
  - if [ "$BUILD_ANDROID" == true ]; then
      ./install-ndk.sh;
      export ANDROID_NDK_HOME=`pwd`/NDK;
      ${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --api 26 --arch arm64 --install-dir "${ANDROID_NDK_HOME}/arm64";
      ${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --api 26 --arch arm --install-dir "${ANDROID_NDK_HOME}/arm";
      ${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --api 26 --arch x86 --install-dir "${ANDROID_NDK_HOME}/x86";
      ${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --api 26 --arch x86_64 --install-dir "${ANDROID_NDK_HOME}/x86_64";
      rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android;
    fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$BUILD_ANDROID" != "true" ]; then
        echo "Installing coverage tools";
        cargo install cargo-kcov;
        cargo kcov --print-install-kcov-sh | sh;
    fi

install:
  - if [ "$BUILD_ANDROID" == true ]; then
        ./compile-android.sh;
    else
        cargo build --bin aw-server-rust $($RELEASE && echo '--release');
        cargo build --lib $($RELEASE && echo '--release');
    fi

script:
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$BUILD_ANDROID" != "true" ] && [ -z "$RELEASE" ]; then
        echo "Running tests with coverage";
        cargo kcov --verbose;
        bash <(curl -s https://codecov.io/bash);
    else
        cargo test --verbose $($RELEASE && echo '--release');
    fi


before_cache:
  - cargo prune

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev

cache:
  cargo: true
  apt: true
  directories:
    - target/debug/deps
    - target/debug/build

after_success:
